package com.liu.ljwallet.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liu.ljwallet.entity.Transaction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION".
*/
public class TransactionDao extends AbstractDao<Transaction, Long> {

    public static final String TABLENAME = "TRANSACTION";

    /**
     * Properties of entity Transaction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TransactionHash = new Property(1, String.class, "transactionHash", false, "TRANSACTION_HASH");
        public final static Property CumulativeGasUsed = new Property(2, String.class, "cumulativeGasUsed", false, "CUMULATIVE_GAS_USED");
        public final static Property Num = new Property(3, String.class, "num", false, "NUM");
        public final static Property GasUsed = new Property(4, String.class, "gasUsed", false, "GAS_USED");
        public final static Property From = new Property(5, String.class, "from", false, "FROM");
        public final static Property To = new Property(6, String.class, "to", false, "TO");
    }


    public TransactionDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TRANSACTION_HASH\" TEXT," + // 1: transactionHash
                "\"CUMULATIVE_GAS_USED\" TEXT," + // 2: cumulativeGasUsed
                "\"NUM\" TEXT," + // 3: num
                "\"GAS_USED\" TEXT," + // 4: gasUsed
                "\"FROM\" TEXT," + // 5: from
                "\"TO\" TEXT);"); // 6: to
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Transaction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String transactionHash = entity.getTransactionHash();
        if (transactionHash != null) {
            stmt.bindString(2, transactionHash);
        }
 
        String cumulativeGasUsed = entity.getCumulativeGasUsed();
        if (cumulativeGasUsed != null) {
            stmt.bindString(3, cumulativeGasUsed);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(4, num);
        }
 
        String gasUsed = entity.getGasUsed();
        if (gasUsed != null) {
            stmt.bindString(5, gasUsed);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(6, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(7, to);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Transaction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String transactionHash = entity.getTransactionHash();
        if (transactionHash != null) {
            stmt.bindString(2, transactionHash);
        }
 
        String cumulativeGasUsed = entity.getCumulativeGasUsed();
        if (cumulativeGasUsed != null) {
            stmt.bindString(3, cumulativeGasUsed);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(4, num);
        }
 
        String gasUsed = entity.getGasUsed();
        if (gasUsed != null) {
            stmt.bindString(5, gasUsed);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(6, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(7, to);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Transaction readEntity(Cursor cursor, int offset) {
        Transaction entity = new Transaction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // transactionHash
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cumulativeGasUsed
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gasUsed
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // from
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // to
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Transaction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTransactionHash(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCumulativeGasUsed(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGasUsed(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFrom(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Transaction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Transaction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Transaction entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
